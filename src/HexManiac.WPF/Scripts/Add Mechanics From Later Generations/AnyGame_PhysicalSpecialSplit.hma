#	Physical/Special Split
#	Credits to DoesntKnowHowToPlay for making the original patches
#	Edits and HMA script by AGSMGMaster64

#	This script makes some changes to how physical/special damage is determined in the Gen 3 games
#	More specifically, the category of a move is based on a normally unused byte for move stats instead of the move type
#	This allows ???-type moves to do damage as well since it removes the hardcoding for them
#	This script also adds the Sandstorm Rock Sp Def buff which relies on the physical/special split to work

.python
if data.pokemon.moves.stats.battle.Run.ElementContent[0].Length != 1:
  editor.SelectedTab.RaiseError("Cannot apply PSS after move expansion.")
  editor.SelectedTab.AbortScript()
.end


@!game(AXVE0) @1E0868
@!game(AXVE1) @1E0880
@!game(AXPE0) @1E07F8
@!game(AXPE1) @1E0810
@!game(BPRE0) @1E4018
@!game(BPRE1) @1E4088
@!game(BPGE0) @1E3FF4
@!game(BPGE1) @1E4064
@!game(BPEE0) @2E7540
@!game(All) ^thumb.Divsi3

@!game(AXVE0_AXVE1_AXPE0_AXPE1) @01C3AE
@!game(BPRE0_BPGE0) @01DF3E
@!game(BPRE1_BPGE1) @01DF52
@!game(BPEE0) @04674E
@!game(All) ^thumb.physicalspecialsplit.accuracy

@!game(AXVE0_AXVE1_AXPE0_AXPE1) @01DB8E
@!game(BPRE0_BPGE0) @01F6C2
@!game(BPRE1_BPGE1) @01F6D6
@!game(BPEE0) @047F02
@!game(All) ^thumb.physicalspecialsplit.datahp1

@!game(AXVE0_AXVE1_AXPE0_AXPE1) @01DDD4
@!game(BPRE0_BPGE0) @01F908
@!game(BPRE1_BPGE1) @01F91C
@!game(BPEE0) @048148
@!game(All) ^thumb.physicalspecialsplit.datahp2

@!game(AXVE0_AXVE1_AXPE0_AXPE1) @03BA2C
@!game(BPRE0_BPGE0) @03ECEC
@!game(BPRE1_BPGE1) @03ED00
@!game(BPEE0) @06957C
@!game(All) ^thumb.CalculateBaseDamage

@!game(AXVE0_AXVE1_AXPE0_AXPE1) @03BC96
@!game(BPRE0_BPGE0) @03EF06
@!game(BPRE1_BPGE1) @03EF1A
@!game(BPEE0) @069746
@!game(All) ^thumb.physicalspecialsplit.typeboostitems

@!game(AXVE0_AXVE1_AXPE0_AXPE1) @03BDD2
@!game(BPRE0_BPGE0) @03F03A
@!game(BPRE1_BPGE1) @03F04E
@!game(BPEE0) @06986E
@!game(All) ^thumb.physicalspecialsplit.thickfat

@!game(AXVE0_AXVE1_AXPE0_AXPE1) @03BFBC
@!game(BPRE0_BPGE0) @03F224
@!game(BPRE1_BPGE1) @03F238
@!game(BPEE0) @069A58
@!game(All) ^thumb.physicalspecialsplit.physicalcheck

@!game(AXVE0_AXVE1_AXPE0_AXPE1) @03C122
@!game(BPRE0_BPGE0) @03F38A
@!game(BPRE1_BPGE1) @03F39E
@!game(BPEE0) @069BC2
@!game(All) ^thumb.physicalspecialsplit.specialstatuscheck

@!game(AXVE0_AXVE1_AXPE0_AXPE1) @03C25C
@!game(BPRE0_BPGE0) @03F4C4
@!game(BPRE1_BPGE1) @03F4D8
@!game(BPEE0) @069CFC
@!game(All) ^thumb.physicalspecialsplit.weather



#	in "Cmd_accuracycheck"
#	Changes the check for Hustle so that it checks for the 11th byte instead of the type byte

@thumb.physicalspecialsplit.accuracy .thumb
    ldrb  r0, [r0, #10]
.end
@thumb.physicalspecialsplit.accuracy+182 .thumb
    cmp   r1, #0					@ if (gBattleMons[gBattlerAttacker].ability == ABILITY_HUSTLE && IS_MOVE_PHYSICAL(move))
    bne   <thumb.physicalspecialsplit.accuracy+196>
.end



#	in "Cmd_datahpupdate"
#	Changes the way how physical and special damage are recorded for use with Counter/Mirror Coat

@thumb.physicalspecialsplit.datahp1 .thumb
    ldrb  r6, [r0, #10]
.end
@thumb.physicalspecialsplit.datahp2 .thumb
    cmp   r6, #0					@ if (IS_MOVE_PHYSICAL(move) && !(gHitMarker & HITMARKER_PASSIVE_DAMAGE) && gCurrentMove != MOVE_PAIN_SPLIT)
    bne   <thumb.physicalspecialsplit.datahp2+84>
.end
@thumb.physicalspecialsplit.datahp2+84 .thumb
    cmp   r6, #1					@ else if (IS_MOVE_SPECIAL(move) && !(gHitMarker & HITMARKER_PASSIVE_DAMAGE))
    bne   <thumb.physicalspecialsplit.datahp2+F2>
.end



#	in "CalculateBaseDamage"
#	Adds in r11 to store the split byte to be referenced later

@!game(AXVE0_AXVE1_AXPE0_AXPE1)
@thumb.CalculateBaseDamage .thumb
    push  {r4-r7, lr}
    mov   r7, r11
    mov   r6, r10
    mov   r5, r9
    mov   r4, r8
    push  {r4-r7}
    sub   sp, #44
    mov   r7, r0
    str   r1, [sp, #4]
    str   r2, [sp, #8]
    ldr   r0, [sp, #80]
    ldr   r1, [sp, #84]
    ldr   r2, [sp, #88]
    ldr   r4, [sp, #92]
    lsl   r3, r3, #16
    lsr   r3, r3, #16
    str   r3, [sp, #12]
    lsl   r0, r0, #16
    lsr   r3, r0, #16
    lsl   r1, r1, #24
    lsr   r6, r1, #24
    lsl   r2, r2, #24
    lsr   r2, r2, #24
    str   r2, [sp, #16]
    lsl   r4, r4, #24
    lsr   r4, r4, #24
    mov   r5, #0
    cmp   r3, #0
    bne   PowerOverride
    ldr   r2, [pc, <thumb.CalculateBaseDamage+70>]
    ldr   r1, [pc, <thumb.CalculateBaseDamage+74>]
    ldr   r3, [sp, #8]
    lsl   r0, r3, #1
    add   r0, r0, r3
    lsl   r0, r0, #2
    add   r0, r0, r1
    ldrb  r0, [r0, #1]
    strh  r0, [r2, #0]
    b     GetMoveCategory
	nop
PowerOverride:
    ldr   r0, [pc, <thumb.CalculateBaseDamage+70>]
    strh  r3, [r0, #0]
GetMoveCategory:
    ldr   r1, [pc, <thumb.CalculateBaseDamage+74>]
    ldr   r2, [sp, #8]
    lsl   r0, r2, #1
    add   r0, r0, r2
    lsl   r0, r0, #2
    add   r0, r0, r1
    ldrb  r2, [r0, #10]
    mov   r11, r2					@ Puts split byte for the move used in r11 to be checked later
    cmp   r6, #0
    bne   <thumb.CalculateBaseDamage+78>
.end
@!game(BPRE0_BPRE1_BPGE0_BPGE1)
@thumb.CalculateBaseDamage .thumb
    push  {r4-r7, lr}
    mov   r7, r11
    mov   r6, r10
    mov   r5, r9
    mov   r4, r8
    push  {r4-r7}
    sub   sp, #44
    mov   r6, r0
    str   r1, [sp, #4]
    str   r2, [sp, #8]
    ldr   r0, [sp, #80]
    ldr   r1, [sp, #84]
    ldr   r2, [sp, #88]
    ldr   r4, [sp, #92]
    lsl   r3, r3, #16
    lsr   r3, r3, #16
    str   r3, [sp, #12]
    lsl   r0, r0, #16
    lsr   r3, r0, #16
    lsl   r1, r1, #24
    lsr   r7, r1, #24
    lsl   r2, r2, #24
    lsr   r2, r2, #24
    str   r2, [sp, #16]
    lsl   r4, r4, #24
    lsr   r4, r4, #24
    mov   r5, #0
    cmp   r3, #0
    bne   PowerOverride
    ldr   r2, [pc, <thumb.CalculateBaseDamage+70>]
    ldr   r1, [pc, <thumb.CalculateBaseDamage+74>]
    ldr   r3, [sp, #8]
    lsl   r0, r3, #1
    add   r0, r0, r3
    lsl   r0, r0, #2
    add   r0, r0, r1
    ldrb  r0, [r0, #1]
    strh  r0, [r2, #0]
    b     GetMoveCategory
    nop
PowerOverride:
    ldr   r0, [pc, <thumb.CalculateBaseDamage+70>]
    strh  r3, [r0, #0]
GetMoveCategory:
    ldr   r1, [pc, <thumb.CalculateBaseDamage+74>]
    ldr   r2, [sp, #8]
    lsl   r0, r2, #1
    add   r0, r0, r2
    lsl   r0, r0, #2
    add   r0, r0, r1
    ldrb  r2, [r0, #10]
    mov   r11, r2					@ Puts split byte for the move used in r11 to be checked later
    cmp   r7, #0
    bne   <thumb.CalculateBaseDamage+78>
.end
@!game(BPEE0)
@thumb.CalculateBaseDamage .thumb
    push  {r4-r7, lr}
    mov   r7, r11
    mov   r6, r10
    mov   r5, r9
    mov   r4, r8
    push  {r4-r7}
    sub   sp, #48
    mov   r6, r0
    str   r1, [sp, #4]
    str   r2, [sp, #8]
    ldr   r0, [sp, #84]
    ldr   r1, [sp, #88]
    ldr   r2, [sp, #92]
    ldr   r4, [sp, #96]
    lsl   r3, r3, #16
    lsr   r3, r3, #16
    str   r3, [sp, #12]
    lsl   r0, r0, #16
    lsr   r3, r0, #16
    lsl   r1, r1, #24
    lsr   r7, r1, #24
    lsl   r2, r2, #24
    lsr   r2, r2, #24
    str   r2, [sp, #16]
    lsl   r4, r4, #24
    lsr   r4, r4, #24
    str   r4, [sp, #20]
    mov   r5, #0
    cmp   r3, #0
    bne   PowerOverride
    ldr   r2, BattleMovePower
    ldr   r1, [pc, <thumb.CalculateBaseDamage+78>]
    ldr   r3, [sp, #8]
    lsl   r0, r3, #1
    add   r0, r0, r3
    lsl   r0, r0, #2
    add   r0, r0, r1
    ldrb  r0, [r0, #1]
    strh  r0, [r2, #0]
    b     GetMoveCategory
BattleMovePower:
    .word 0x020244E0
PowerOverride:
    ldr   r0, [pc, <thumb.CalculateBaseDamage+74>]
    strh  r3, [r0, #0]
GetMoveCategory:
    ldr   r1, [pc, <thumb.CalculateBaseDamage+78>]
    ldr   r2, [sp, #8]
    lsl   r0, r2, #1
    add   r0, r0, r2
    lsl   r0, r0, #2
    add   r0, r0, r1
    ldrb  r2, [r0, #10]
    mov   r11, r2					@ Puts split byte for the move used in r11 to be checked later
    cmp   r7, #0
    bne   <0695F8>
.end

#	For Type-boosting items
@!game(AXVE0_AXVE1_AXPE0_AXPE1_BPRE0_BPRE1_BPGE0_BPGE1)
@thumb.physicalspecialsplit.typeboostitems .thumb
    mov   r1, r11
    cmp   r1, #0					@ if (IS_MOVE_PHYSICAL(move)) attack = (attack * (attackerHoldEffectParam + 100)) / 100;
    bne   <thumb.physicalspecialsplit.typeboostitems+8>
.end
@!game(BPEE0)
@thumb.physicalspecialsplit.typeboostitems .thumb
    mov   r1, r11
    cmp   r1, #0					@ if (IS_MOVE_PHYSICAL(move)) attack = (attack * (attackerHoldEffectParam + 100)) / 100;
    beq   <06966C>					@ specific to Emerald, so it's ok to leave it like this
.end



#	Change Thick Fat to affect physical moves as well
@!game(AXVE0_AXVE1_AXPE0_AXPE1)
@thumb.physicalspecialsplit.thickfat .thumb
    cmp   r0, #47
    bne   HustleCheck
    mov   r2, r9
    cmp   r2, #10
    beq   ThickFat
    cmp   r2, #15
    bne   HustleCheck
ThickFat:
    mov   r3, r8
    lsr   r3, r3, #1
    mov   r8, r3
    lsr   r6, r6, #1
    b     HustleCheck
    nop
    nop
    nop
HustleCheck:
    ldr   r0, [sp, #36]
    ldrb  r4, [r0, #0]
    cmp   r4, #55
    bne   <thumb.physicalspecialsplit.thickfat+2A>
    lsr   r0, r6, #1
    add   r6, r0, r6
.end
@!game(BPRE0_BPRE1_BPGE0_BPGE1)
@thumb.physicalspecialsplit.thickfat .thumb
    cmp   r0, #47
    bne   HustleCheck
    mov   r2, r9
    cmp   r2, #10
    beq   ThickFat
    cmp   r2, #15
    bne   HustleCheck
ThickFat:
    mov   r3, r8
    lsr   r3, r3, #1
    mov   r8, r3
    lsr   r7, r7, #1
    b     HustleCheck
    nop
    nop
    nop
HustleCheck:
    ldr   r0, [sp, #36]
    ldrb  r4, [r0, #0]
    cmp   r4, #55
    bne   <thumb.physicalspecialsplit.thickfat+2A>
    lsr   r0, r7, #1
    add   r7, r0, r7
.end
@!game(BPEE0)
@thumb.physicalspecialsplit.thickfat .thumb
    cmp   r0, #47
    bne   HustleCheck
    mov   r2, r10
    cmp   r2, #10
    beq   ThickFat
    cmp   r2, #15
    bne   HustleCheck
ThickFat:
    mov   r3, r8
    lsr   r3, r3, #1
    mov   r8, r3
    lsr   r7, r7, #1
    b     HustleCheck
    nop
    nop
    nop
HustleCheck:
    ldr   r0, [sp, #40]
    ldrb  r4, [r0, #0]
    cmp   r4, #55
    bne   <thumb.physicalspecialsplit.thickfat+2A>
    lsr   r0, r7, #1
    add   r7, r0, r7
.end
@!game(All)



#	Change a check for physical-based calculations to use the new byte
@thumb.physicalspecialsplit.physicalcheck .thumb
    mov   r1, r11
    cmp   r1, #0					@ if (IS_MOVE_PHYSICAL(move))
    beq   <thumb.physicalspecialsplit.physicalcheck+8>
.end

#	Removes the ???-type hardcoding as well as changing the check for special-based calculations
#	Also delinks Weather from only being affected by special attacks
@!game(AXVE0_AXVE1_AXPE0_AXPE1)
@thumb.physicalspecialsplit.specialstatuscheck .thumb
    mov   r6, r11
    cmp   r6, #3					@ if (IS_MOVE_STATUS(move))
    bne   SpecialCategoryCheck
    mov   r5, #0
SpecialCategoryCheck:
    mov   r0, r11
    cmp   r0, #1					@ if (IS_MOVE_SPECIAL(move))
    beq   <thumb.physicalspecialsplit.specialstatuscheck+10>
    b     <thumb.physicalspecialsplit.weather>
.end
@!game(BPRE0_BPRE1_BPGE0_BPGE1_BPEE0)
@thumb.physicalspecialsplit.specialstatuscheck .thumb
    mov   r7, r11
    cmp   r7, #3					@ if (IS_MOVE_STATUS(move))
    bne   SpecialCategoryCheck
    mov   r5, #0
SpecialCategoryCheck:
    mov   r0, r11
    cmp   r0, #1					@ if (IS_MOVE_SPECIAL(move))
    beq   <thumb.physicalspecialsplit.specialstatuscheck+10>
    b     <thumb.physicalspecialsplit.weather>
.end
@!game(All)


#	Rewrites weather calcs to fit in Sp Def boost for Rock
@thumb.physicalspecialsplit.weather+2C .thumb
    ldr   r2, BattleWeather
    ldrh  r4, [r2, #0]
    cmp   r4, #0
    beq   <thumb.physicalspecialsplit.weather+B0>
    mov   r6, r10
    mov   r0, #96					@ B_WEATHER_SUN
    and   r0, r4
    cmp   r0, #0
    beq   SandstormCheck
    cmp   r6, #10					@ Fire Type
    beq   WeatherHalfBoost
    cmp   r6, #11					@ Water Type
    beq   WeatherHalfDamage
    b     <thumb.physicalspecialsplit.weather+B0>
BattleTypeFlags:
    .word 0x02022FEC
MoveBattleStats:
    .word <data.pokemon.moves.stats.battle>
BattleWeather:
    .word 0x020243CC				@ gBattleWeather
SandstormCheck:
    mov   r0, #24					@ B_WEATHER_SANDSTORM
    and   r0, r4
    cmp   r0, #0
    beq   MiscWeatherCheck
    mov   r0, r11
    cmp   r0, #1					@ Special Move
    bne   MiscWeatherCheck
    ldr   r2, BattleMonsType1
    ldr   r0, BattlerTarget
    ldrb  r1, [r0, #0]
    mov   r0, #88
    mul   r0, r1
    add   r3, r0, r2
    ldrb  r0, [r3, #0]
    cmp   r0, #5					@ Rock type (Primary)
    beq   SandstormBoostSpDef
    ldrb  r0, [r3, #1]
    cmp   r0, #5					@ Rock type (Secondary)
    bne   MiscWeatherCheck
SandstormBoostSpDef:
    mov   r0, #10
    mul   r0, r5
    mov   r1, #15
    bl    <thumb.Divsi3>
    mov   r5, r0
MiscWeatherCheck:
    ldr   r0, CurrentMove
    ldrh  r0, [r0, #0]
    cmp   r0, #76					@ Solar Beam recieves half. The sun check skips this if there is sun up.
    beq   WeatherHalfDamage
    cmp   r4, #7					@ B_WEATHER_RAIN
    bhi   <thumb.physicalspecialsplit.weather+B0>
    cmp   r6, #10					@ Fire Type
    beq   WeatherHalfDamage
    cmp   r6, #11					@ Water Type
    beq   WeatherHalfBoost
    b     <thumb.physicalspecialsplit.weather+B0>
BattleMonsType1:
    .word 0x020240A5				@ gBattleMons+21		gBattleMons[].type1
BattlerTarget:
    .word 0x0202420C				@ gBattlerTarget
CurrentMove:
    .word 0x020241EA				@ gCurrentMove
WeatherHalfBoost:
    lsr   r0, r5, #1				@ damage = (15 * damage) / 10;
    add   r5, r5, r0
    b     <thumb.physicalspecialsplit.weather+B0>
WeatherHalfDamage:
    lsr   r5, r5, #1				@ damage /= 2;
.end
#	Registers used and RAM addresses are different in other games
@!game(AXVE0_AXVE1_AXPE0_AXPE1_BPRE0_BPRE1_BPGE0_BPGE1)
@thumb.physicalspecialsplit.weather+34 .thumb
    mov   r6, r9					@ r9 is used in every other version
.end
@!game(AXVE0_AXVE1_AXPE0_AXPE1)
@thumb.physicalspecialsplit.weather+48
F8 39 02 02 <data.pokemon.moves.stats.battle> B8 4D 02 02
@thumb.physicalspecialsplit.weather+9C
A1 4A 02 02 08 4C 02 02 E6 4B 02 02
@!game(BPRE0_BPRE1_BPGE0_BPGE1)
@thumb.physicalspecialsplit.weather+48
4C 2B 02 02 <data.pokemon.moves.stats.battle> 1C 3F 02 02
@thumb.physicalspecialsplit.weather+9C
05 3C 02 02 6C 3D 02 02 4A 3D 02 02


#	Pops back the r11 register added in for the physical/special split
@!game(AXVE0_AXVE1_AXPE0_AXPE1)
@thumb.physicalspecialsplit.weather+D8 .thumb
    pop   {r3-r6}
    mov   r8, r3
    mov   r9, r4
    mov   r10, r5
    mov   r11, r6
    pop   {r4-r7}
    pop   {r1}
    bx    r1
.end
@!game(BPRE0_BPRE1_BPGE0_BPGE1_BPEE0)
@thumb.physicalspecialsplit.weather+DC .thumb
    pop   {r3-r6}
    mov   r8, r3
    mov   r9, r4
    mov   r10, r5
    mov   r11, r6
    pop   {r4-r7}
    pop   {r1}
    bx    r1
.end


#	Adds in a list to be referenced by the move stat table to edit a move's category
#	Anything beyond this currently does not work for build 0.5.2.3

.python
tab = editor.SelectedTab
categoryList = ['Physical', 'Special', 'Status']
tab.Model.SetList(tab.CurrentChange, "movecategory", categoryList, None)
.end

@!game(All)
@data.pokemon.moves.stats.battle
^data.pokemon.moves.stats.battle[effect.moveeffectoptions power. type.data.pokemon.type.names accuracy. pp. effectAccuracy. target|b[]movetarget priority.|z info|b[]moveinfo unused. category.movecategory unused.]data.pokemon.moves.names

#	Turns all 0 base power moves into status moves as a relatively safe conversion

.python
for move in data.pokemon.moves.stats.battle:
  if move.power != 0: continue
  move.category = 'Status'
.end